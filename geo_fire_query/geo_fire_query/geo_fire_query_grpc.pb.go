// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package geo_fire_query

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeoFireQueryClient is the client API for GeoFireQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeoFireQueryClient interface {
	GetBusinesses(ctx context.Context, in *BusinessRequest, opts ...grpc.CallOption) (*BusinessResponse, error)
}

type geoFireQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoFireQueryClient(cc grpc.ClientConnInterface) GeoFireQueryClient {
	return &geoFireQueryClient{cc}
}

func (c *geoFireQueryClient) GetBusinesses(ctx context.Context, in *BusinessRequest, opts ...grpc.CallOption) (*BusinessResponse, error) {
	out := new(BusinessResponse)
	err := c.cc.Invoke(ctx, "/geofirequery.GeoFireQuery/GetBusinesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoFireQueryServer is the server API for GeoFireQuery service.
// All implementations must embed UnimplementedGeoFireQueryServer
// for forward compatibility
type GeoFireQueryServer interface {
	GetBusinesses(context.Context, *BusinessRequest) (*BusinessResponse, error)
	mustEmbedUnimplementedGeoFireQueryServer()
}

// UnimplementedGeoFireQueryServer must be embedded to have forward compatible implementations.
type UnimplementedGeoFireQueryServer struct {
}

func (UnimplementedGeoFireQueryServer) GetBusinesses(context.Context, *BusinessRequest) (*BusinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinesses not implemented")
}
func (UnimplementedGeoFireQueryServer) mustEmbedUnimplementedGeoFireQueryServer() {}

// UnsafeGeoFireQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoFireQueryServer will
// result in compilation errors.
type UnsafeGeoFireQueryServer interface {
	mustEmbedUnimplementedGeoFireQueryServer()
}

func RegisterGeoFireQueryServer(s grpc.ServiceRegistrar, srv GeoFireQueryServer) {
	s.RegisterService(&GeoFireQuery_ServiceDesc, srv)
}

func _GeoFireQuery_GetBusinesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BusinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoFireQueryServer).GetBusinesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geofirequery.GeoFireQuery/GetBusinesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoFireQueryServer).GetBusinesses(ctx, req.(*BusinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeoFireQuery_ServiceDesc is the grpc.ServiceDesc for GeoFireQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoFireQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geofirequery.GeoFireQuery",
	HandlerType: (*GeoFireQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBusinesses",
			Handler:    _GeoFireQuery_GetBusinesses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geo_fire_query/geo_fire_query.proto",
}
